{"ast":null,"code":"import _regeneratorRuntime from \"/Users/michaelkolawole/E-Commerce/kellys-clothing/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _objectSpread from \"/Users/michaelkolawole/E-Commerce/kellys-clothing/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _asyncToGenerator from \"/Users/michaelkolawole/E-Commerce/kellys-clothing/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\nvar config = {\n  apiKey: \"AIzaSyB9fEdOdPwQpI7cV4tTPe-9jOZ3RTiSpSw\",\n  authDomain: \"kellysdb-9b0d3.firebaseapp.com\",\n  databaseURL: \"https://kellysdb-9b0d3.firebaseio.com\",\n  projectId: \"kellysdb-9b0d3\",\n  storageBucket: \"kellysdb-9b0d3.appspot.com\",\n  messagingSenderId: \"210246877521\",\n  appId: \"1:210246877521:web:7a30ebaed0e55113ff9370\",\n  measurementId: \"G-1PC4F7TRF6\"\n};\nexport var createUserProfileDocument = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(userAuth, additionalData) {\n    var userRef, collectionRef, snapShot, collectionSnapshot, displayName, email, createAt;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (userAuth) {\n              _context.next = 2;\n              break;\n            }\n\n            return _context.abrupt(\"return\");\n\n          case 2:\n            // If no user is signed in , just return\n            userRef = firestore.doc(\"users/\".concat(userAuth.uid)); // just creates a document in firestore with id of the signedIn user's Id i.e uid\n\n            collectionRef = firestore.collection('users');\n            _context.next = 6;\n            return userRef.get();\n\n          case 6:\n            snapShot = _context.sent;\n            _context.next = 9;\n            return collectionRef.get();\n\n          case 9:\n            collectionSnapshot = _context.sent;\n            console.log({\n              collection: collectionSnapshot.docs.map(function (doc) {\n                return doc.data();\n              })\n            });\n\n            if (snapShot.exists) {\n              _context.next = 22;\n              break;\n            }\n\n            displayName = userAuth.displayName, email = userAuth.email;\n            createAt = new Date(); // We want to also know when we made the document\n\n            _context.prev = 14;\n            _context.next = 17;\n            return userRef.set(_objectSpread({\n              // the .set() method is just a firebase method for creating a document in the firestore with those properties\n              displayName: displayName,\n              email: email,\n              createAt: createAt\n            }, additionalData));\n\n          case 17:\n            _context.next = 22;\n            break;\n\n          case 19:\n            _context.prev = 19;\n            _context.t0 = _context[\"catch\"](14);\n            console.log('error creating user', _context.t0.message);\n\n          case 22:\n            return _context.abrupt(\"return\", userRef);\n\n          case 23:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[14, 19]]);\n  }));\n\n  return function createUserProfileDocument(_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}();\nexport var addCollectionAndItems = (collectionKey, objects);\nfirebase.initializeApp(config);\nexport var auth = firebase.auth();\nexport var firestore = firebase.firestore();\nvar provider = new firebase.auth.GoogleAuthProvider();\nprovider.setCustomParameters({\n  prompt: 'select_account'\n});\nexport var signInWithGoogle = function signInWithGoogle() {\n  return auth.signInWithPopup(provider);\n};\nexport default firebase;","map":{"version":3,"sources":["/Users/michaelkolawole/E-Commerce/kellys-clothing/src/firebase/firebase.utils.js"],"names":["firebase","config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","createUserProfileDocument","userAuth","additionalData","userRef","firestore","doc","uid","collectionRef","collection","get","snapShot","collectionSnapshot","console","log","docs","map","data","exists","displayName","email","createAt","Date","set","message","addCollectionAndItems","collectionKey","objects","initializeApp","auth","provider","GoogleAuthProvider","setCustomParameters","prompt","signInWithGoogle","signInWithPopup"],"mappings":";;;AAAA,OAAOA,QAAP,MAAqB,cAArB;AACA,OAAO,oBAAP;AACA,OAAO,eAAP;AAEA,IAAMC,MAAM,GAAG;AACXC,EAAAA,MAAM,EAAE,yCADG;AAEXC,EAAAA,UAAU,EAAE,gCAFD;AAGXC,EAAAA,WAAW,EAAE,uCAHF;AAIXC,EAAAA,SAAS,EAAE,gBAJA;AAKXC,EAAAA,aAAa,EAAE,4BALJ;AAMXC,EAAAA,iBAAiB,EAAE,cANR;AAOXC,EAAAA,KAAK,EAAE,2CAPI;AAQXC,EAAAA,aAAa,EAAE;AARJ,CAAf;AAWA,OAAO,IAAMC,yBAAyB;AAAA,sEAAG,iBAAOC,QAAP,EAAiBC,cAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAChCD,QADgC;AAAA;AAAA;AAAA;;AAAA;;AAAA;AACb;AAElBE,YAAAA,OAH+B,GAGrBC,SAAS,CAACC,GAAV,iBAAuBJ,QAAQ,CAACK,GAAhC,EAHqB,EAGmB;;AAElDC,YAAAA,aAL+B,GAKfH,SAAS,CAACI,UAAV,CAAqB,OAArB,CALe;AAAA;AAAA,mBAMdL,OAAO,CAACM,GAAR,EANc;;AAAA;AAM/BC,YAAAA,QAN+B;AAAA;AAAA,mBAQJH,aAAa,CAACE,GAAd,EARI;;AAAA;AAQ/BE,YAAAA,kBAR+B;AAUrCC,YAAAA,OAAO,CAACC,GAAR,CAAY;AAAEL,cAAAA,UAAU,EAAEG,kBAAkB,CAACG,IAAnB,CAAwBC,GAAxB,CAA4B,UAAAV,GAAG;AAAA,uBAAIA,GAAG,CAACW,IAAJ,EAAJ;AAAA,eAA/B;AAAd,aAAZ;;AAVqC,gBAYhCN,QAAQ,CAACO,MAZuB;AAAA;AAAA;AAAA;;AAazBC,YAAAA,WAbyB,GAaFjB,QAbE,CAazBiB,WAbyB,EAaZC,KAbY,GAaFlB,QAbE,CAaZkB,KAbY;AAc3BC,YAAAA,QAd2B,GAchB,IAAIC,IAAJ,EAdgB,EAcF;;AAdE;AAAA;AAAA,mBAiBvBlB,OAAO,CAACmB,GAAR;AAAe;AACjBJ,cAAAA,WAAW,EAAXA,WADE;AAEFC,cAAAA,KAAK,EAALA,KAFE;AAGFC,cAAAA,QAAQ,EAARA;AAHE,eAIClB,cAJD,EAjBuB;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAwB7BU,YAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ,EAAmC,YAAMU,OAAzC;;AAxB6B;AAAA,6CA2B9BpB,OA3B8B;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAzBH,yBAAyB;AAAA;AAAA;AAAA,GAA/B;AA8BP,OAAO,IAAMwB,qBAAqB,IAAIC,aAAa,EAAGC,OAApB,CAA3B;AAIPpC,QAAQ,CAACqC,aAAT,CAAuBpC,MAAvB;AAGA,OAAO,IAAMqC,IAAI,GAAGtC,QAAQ,CAACsC,IAAT,EAAb;AACP,OAAO,IAAMxB,SAAS,GAAGd,QAAQ,CAACc,SAAT,EAAlB;AAIP,IAAMyB,QAAQ,GAAG,IAAIvC,QAAQ,CAACsC,IAAT,CAAcE,kBAAlB,EAAjB;AAKAD,QAAQ,CAACE,mBAAT,CAA6B;AAAEC,EAAAA,MAAM,EAAE;AAAV,CAA7B;AAEA,OAAO,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB;AAAA,SAAML,IAAI,CAACM,eAAL,CAAqBL,QAArB,CAAN;AAAA,CAAzB;AAEP,eAAevC,QAAf","sourcesContent":["import firebase from 'firebase/app'\nimport 'firebase/firestore'\nimport 'firebase/auth'\n\nconst config = {\n    apiKey: \"AIzaSyB9fEdOdPwQpI7cV4tTPe-9jOZ3RTiSpSw\",\n    authDomain: \"kellysdb-9b0d3.firebaseapp.com\",\n    databaseURL: \"https://kellysdb-9b0d3.firebaseio.com\",\n    projectId: \"kellysdb-9b0d3\",\n    storageBucket: \"kellysdb-9b0d3.appspot.com\",\n    messagingSenderId: \"210246877521\",\n    appId: \"1:210246877521:web:7a30ebaed0e55113ff9370\",\n    measurementId: \"G-1PC4F7TRF6\"\n};\n\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n    if (!userAuth) return;  // If no user is signed in , just return\n\n    const userRef = firestore.doc(`users/${userAuth.uid}`)  // just creates a document in firestore with id of the signedIn user's Id i.e uid\n\n    const collectionRef = firestore.collection('users')\n    const snapShot = await userRef.get()  // Getting a snapShot of the document created and saving it as userRef\n\n    const collectionSnapshot = await collectionRef.get()\n\n    console.log({ collection: collectionSnapshot.docs.map(doc => doc.data()) })\n\n    if (!snapShot.exists) {\n        const { displayName, email } = userAuth;\n        const createAt = new Date();   // We want to also know when we made the document\n\n        try {\n            await userRef.set({  // the .set() method is just a firebase method for creating a document in the firestore with those properties\n                displayName,\n                email,\n                createAt,\n                ...additionalData\n            }) // \n        } catch (error) {\n            console.log('error creating user', error.message)\n        }\n    }\n    return userRef;\n}\n\nexport const addCollectionAndItems = (collectionKey , objects)\n\n\n\nfirebase.initializeApp(config)\n\n\nexport const auth = firebase.auth()\nexport const firestore = firebase.firestore()\n\n\n\nconst provider = new firebase.auth.GoogleAuthProvider();\n\n\n\n\nprovider.setCustomParameters({ prompt: 'select_account' });\n\nexport const signInWithGoogle = () => auth.signInWithPopup(provider)\n\nexport default firebase;"]},"metadata":{},"sourceType":"module"}