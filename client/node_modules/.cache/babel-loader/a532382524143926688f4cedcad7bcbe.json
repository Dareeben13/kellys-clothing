{"ast":null,"code":"import { createSelector } from 'reselect';\nimport memoize from 'lodash.memoize';\n\nvar selectShop = function selectShop(state) {\n  return state.shop;\n};\n\nexport var selectCollections = createSelector([selectShop], function (shop) {\n  return shop.collections;\n});\nexport var selectCollectionsForPreview = createSelector([selectCollections], function (collections) {\n  return collections ? Object.keys(collections).map(function (key) {\n    return collections[key];\n  }) : [];\n});\nexport var selectCollection = memoize(function (collectionUrlParam) {\n  return createSelector([selectCollections], function (collections) {\n    return collections ? collections[collectionUrlParam] : null;\n  });\n});\nexport var selectIsCollectionFetching = createSelector([sle]); // The logic above is just a logical selector to return the collectionUrlParam that is equall to value of our COLLECTION_ID_MAP keys\n// We are doing this because our URL parameter is a string whereas the id from each collection we wanna match is an integar number","map":{"version":3,"sources":["/Users/michaelkolawole/E-Commerce/kellys-clothing/src/redux/shop/shop.selectors.js"],"names":["createSelector","memoize","selectShop","state","shop","selectCollections","collections","selectCollectionsForPreview","Object","keys","map","key","selectCollection","collectionUrlParam","selectIsCollectionFetching","sle"],"mappings":"AAAA,SAASA,cAAT,QAA+B,UAA/B;AAEA,OAAOC,OAAP,MAAoB,gBAApB;;AAGA,IAAMC,UAAU,GAAG,SAAbA,UAAa,CAACC,KAAD;AAAA,SAAWA,KAAK,CAACC,IAAjB;AAAA,CAAnB;;AAEA,OAAO,IAAMC,iBAAiB,GAAGL,cAAc,CAC3C,CAACE,UAAD,CAD2C,EAG3C,UAAAE,IAAI;AAAA,SAAIA,IAAI,CAACE,WAAT;AAAA,CAHuC,CAAxC;AAMP,OAAO,IAAMC,2BAA2B,GAAGP,cAAc,CACrD,CAACK,iBAAD,CADqD,EAIrD,UAAAC,WAAW;AAAA,SAAIA,WAAW,GAAGE,MAAM,CAACC,IAAP,CAAYH,WAAZ,EAAyBI,GAAzB,CAA6B,UAAAC,GAAG;AAAA,WAAIL,WAAW,CAACK,GAAD,CAAf;AAAA,GAAhC,CAAH,GAA2D,EAA1E;AAAA,CAJ0C,CAAlD;AAQP,OAAO,IAAMC,gBAAgB,GAAGX,OAAO,CAAC,UAACY,kBAAD;AAAA,SACpCb,cAAc,CACV,CAACK,iBAAD,CADU,EAGV,UAAAC,WAAW;AAAA,WAAIA,WAAW,GAAGA,WAAW,CAACO,kBAAD,CAAd,GAAqC,IAApD;AAAA,GAHD,CADsB;AAAA,CAAD,CAAhC;AAQP,OAAO,IAAMC,0BAA0B,GAAGd,cAAc,CACpD,CAACe,GAAD,CADoD,CAAjD,C,CAKH;AACA","sourcesContent":["import { createSelector } from 'reselect'\n\nimport memoize from 'lodash.memoize'\n\n\nconst selectShop = (state) => state.shop\n\nexport const selectCollections = createSelector(\n    [selectShop],\n\n    shop => shop.collections\n)\n\nexport const selectCollectionsForPreview = createSelector(\n    [selectCollections],\n\n\n    collections => collections ? Object.keys(collections).map(key => collections[key]) : []\n\n)\n\nexport const selectCollection = memoize((collectionUrlParam) =>\n    createSelector(\n        [selectCollections],\n\n        collections => collections ? collections[collectionUrlParam] : null\n    )\n)\n\nexport const selectIsCollectionFetching = createSelector(\n    [sle]\n)\n\n\n    // The logic above is just a logical selector to return the collectionUrlParam that is equall to value of our COLLECTION_ID_MAP keys\n    // We are doing this because our URL parameter is a string whereas the id from each collection we wanna match is an integar number"]},"metadata":{},"sourceType":"module"}