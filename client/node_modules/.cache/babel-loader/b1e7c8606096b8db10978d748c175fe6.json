{"ast":null,"code":"import _regeneratorRuntime from \"/Users/michaelkolawole/E-Commerce/kellys-clothing/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(fetchCollectionsAsync),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(fetchCollectionsStart);\n\nimport { takeEvery } from 'redux-saga/effects';\nimport ShopActionTypes from './shop.types';\nexport function fetchCollectionsAsync() {\n  var collectionRef;\n  return _regeneratorRuntime.wrap(function fetchCollectionsAsync$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return console.log('I AM A DEVELOPER');\n\n        case 2:\n          collectionRef = firestore.collection(\"collections\"); // once the fetching starts , we want to call fetchCollectionStart action\n\n          collectionRef.get().then(function (snapshot) {\n            var collectionsMap = convertCollectionsSnapshotToMap(snapshot);\n            dispatch(fetchCollectionsSuccess(collectionsMap));\n          }).catch(function (error) {\n            return dispatch(fetchCollectionsFaliure(error.message));\n          });\n\n        case 4:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked);\n}\nexport function fetchCollectionsStart() {\n  return _regeneratorRuntime.wrap(function fetchCollectionsStart$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeEvery(ShopActionTypes.FETCH_COLLECTIONS_START, fetchCollectionsAsync);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}","map":{"version":3,"sources":["/Users/michaelkolawole/E-Commerce/kellys-clothing/src/redux/shop/shop.sagas.js"],"names":["fetchCollectionsAsync","fetchCollectionsStart","takeEvery","ShopActionTypes","console","log","collectionRef","firestore","collection","get","then","snapshot","collectionsMap","convertCollectionsSnapshotToMap","dispatch","fetchCollectionsSuccess","catch","error","fetchCollectionsFaliure","message","FETCH_COLLECTIONS_START"],"mappings":";;oDAKiBA,qB;qDAWAC,qB;;AAfjB,SAASC,SAAT,QAA0B,oBAA1B;AAEA,OAAOC,eAAP,MAA4B,cAA5B;AAEA,OAAO,SAAUH,qBAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACH,iBAAMI,OAAO,CAACC,GAAR,CAAY,kBAAZ,CAAN;;AADG;AAGGC,UAAAA,aAHH,GAGmBC,SAAS,CAACC,UAAV,CAAqB,aAArB,CAHnB,EAGwD;;AAE3DF,UAAAA,aAAa,CAACG,GAAd,GAAoBC,IAApB,CAAyB,UAAAC,QAAQ,EAAI;AACjC,gBAAMC,cAAc,GAAGC,+BAA+B,CAACF,QAAD,CAAtD;AACAG,YAAAA,QAAQ,CAACC,uBAAuB,CAACH,cAAD,CAAxB,CAAR;AACH,WAHD,EAGGI,KAHH,CAGS,UAAAC,KAAK;AAAA,mBAAIH,QAAQ,CAACI,uBAAuB,CAACD,KAAK,CAACE,OAAP,CAAxB,CAAZ;AAAA,WAHd;;AALG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWP,OAAO,SAAUlB,qBAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACH,iBAAMC,SAAS,CAACC,eAAe,CAACiB,uBAAjB,EAA0CpB,qBAA1C,CAAf;;AADG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["\nimport { takeEvery } from 'redux-saga/effects'\n\nimport ShopActionTypes from './shop.types'\n\nexport function* fetchCollectionsAsync() {\n    yield console.log('I AM A DEVELOPER');\n\n    const collectionRef = firestore.collection(\"collections\"); // once the fetching starts , we want to call fetchCollectionStart action\n\n    collectionRef.get().then(snapshot => {\n        const collectionsMap = convertCollectionsSnapshotToMap(snapshot);\n        dispatch(fetchCollectionsSuccess(collectionsMap))\n    }).catch(error => dispatch(fetchCollectionsFaliure(error.message)))\n}\n\nexport function* fetchCollectionsStart() {\n    yield takeEvery(ShopActionTypes.FETCH_COLLECTIONS_START, fetchCollectionsAsync);\n}"]},"metadata":{},"sourceType":"module"}