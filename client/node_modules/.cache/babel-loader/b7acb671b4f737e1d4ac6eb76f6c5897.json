{"ast":null,"code":"import _regeneratorRuntime from \"/Users/michaelkolawole/E-Commerce/kellys-clothing/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(fetchCollectionsAsync),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(fetchCollectionsStart);\n\nimport { takeEvery, call } from 'redux-saga/effects';\nimport { firestore, convertCollectionsSnapshotToMap } from '../../firebase/firebase.utils';\nimport { fetchCollectionsSuccess, fetchCollectionsFaliure } from './shop.actions';\nimport ShopActionTypes from './shop.types';\nexport function fetchCollectionsAsync() {\n  var collectionRef, snapShot, collectionsMap;\n  return _regeneratorRuntime.wrap(function fetchCollectionsAsync$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return console.log('I AM A DEVELOPER');\n\n        case 2:\n          collectionRef = firestore.collection(\"collections\"); // once the fetching starts , we want to call fetchCollectionStart action\n\n          _context.next = 5;\n          return collectionRef.get();\n\n        case 5:\n          snapShot = _context.sent;\n          _context.next = 8;\n          return call(c);\n\n        case 8:\n          collectionsMap = _context.sent;\n          // collectionRef.get().then(snapshot => {\n          //     const collectionsMap =  const collectionRef = firestore.collection(\"collections\"); // once the fetching starts , we want to call fetchCollectionStart action\n          dispatch(fetchCollectionsStart());\n          collectionRef.get().then(function (snapshot) {\n            var collectionsMap = convertCollectionsSnapshotToMap(snapshot);\n            dispatch(fetchCollectionsSuccess(collectionsMap));\n          }).catch(function (error) {\n            return dispatch(fetchCollectionsFaliure(error.message));\n          })(snapshot); //     dispatch(fetchCollectionsSuccess(collectionsMap))\n          // }).catch(error => dispatch(fetchCollectionsFaliure(error.message)))\n\n        case 11:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked);\n}\nexport function fetchCollectionsStart() {\n  return _regeneratorRuntime.wrap(function fetchCollectionsStart$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeEvery(ShopActionTypes.FETCH_COLLECTIONS_START, fetchCollectionsAsync);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}","map":{"version":3,"sources":["/Users/michaelkolawole/E-Commerce/kellys-clothing/src/redux/shop/shop.sagas.js"],"names":["fetchCollectionsAsync","fetchCollectionsStart","takeEvery","call","firestore","convertCollectionsSnapshotToMap","fetchCollectionsSuccess","fetchCollectionsFaliure","ShopActionTypes","console","log","collectionRef","collection","get","snapShot","c","collectionsMap","dispatch","then","snapshot","catch","error","message","FETCH_COLLECTIONS_START"],"mappings":";;oDAQiBA,qB;qDAoBAC,qB;;AA5BjB,SAASC,SAAT,EAAoBC,IAApB,QAAgC,oBAAhC;AAEA,SAAQC,SAAR,EAAoBC,+BAApB,QAA0D,+BAA1D;AAEA,SAAQC,uBAAR,EAAkCC,uBAAlC,QAAgE,gBAAhE;AAEA,OAAOC,eAAP,MAA4B,cAA5B;AAEA,OAAO,SAAUR,qBAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACH,iBAAMS,OAAO,CAACC,GAAR,CAAY,kBAAZ,CAAN;;AADG;AAGGC,UAAAA,aAHH,GAGmBP,SAAS,CAACQ,UAAV,CAAqB,aAArB,CAHnB,EAGwD;;AAHxD;AAIc,iBAAMD,aAAa,CAACE,GAAd,EAAN;;AAJd;AAIGC,UAAAA,QAJH;AAAA;AAKoB,iBAAMX,IAAI,CAACY,CAAD,CAAV;;AALpB;AAKGC,UAAAA,cALH;AAQH;AACA;AACIC,UAAAA,QAAQ,CAAChB,qBAAqB,EAAtB,CAAR;AAEAU,UAAAA,aAAa,CAACE,GAAd,GAAoBK,IAApB,CAAyB,UAAAC,QAAQ,EAAI;AACjC,gBAAMH,cAAc,GAAGX,+BAA+B,CAACc,QAAD,CAAtD;AACAF,YAAAA,QAAQ,CAACX,uBAAuB,CAACU,cAAD,CAAxB,CAAR;AACH,WAHD,EAGGI,KAHH,CAGS,UAAAC,KAAK;AAAA,mBAAIJ,QAAQ,CAACV,uBAAuB,CAACc,KAAK,CAACC,OAAP,CAAxB,CAAZ;AAAA,WAHd,EAGoEH,QAHpE,EAZD,CAgBH;AACA;;AAjBG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAoBP,OAAO,SAAUlB,qBAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACH,iBAAMC,SAAS,CAACM,eAAe,CAACe,uBAAjB,EAA0CvB,qBAA1C,CAAf;;AADG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { takeEvery, call } from 'redux-saga/effects'\n\nimport {firestore , convertCollectionsSnapshotToMap} from '../../firebase/firebase.utils'\n\nimport {fetchCollectionsSuccess , fetchCollectionsFaliure} from './shop.actions'\n\nimport ShopActionTypes from './shop.types'\n\nexport function* fetchCollectionsAsync() {\n    yield console.log('I AM A DEVELOPER');\n\n    const collectionRef = firestore.collection(\"collections\"); // once the fetching starts , we want to call fetchCollectionStart action\n    const snapShot = yield collectionRef.get()\n    const collectionsMap = yield call(c)\n\n\n    // collectionRef.get().then(snapshot => {\n    //     const collectionsMap =  const collectionRef = firestore.collection(\"collections\"); // once the fetching starts , we want to call fetchCollectionStart action\n        dispatch(fetchCollectionsStart())\n\n        collectionRef.get().then(snapshot => {\n            const collectionsMap = convertCollectionsSnapshotToMap(snapshot);\n            dispatch(fetchCollectionsSuccess(collectionsMap))\n        }).catch(error => dispatch(fetchCollectionsFaliure(error.message)))(snapshot);\n    //     dispatch(fetchCollectionsSuccess(collectionsMap))\n    // }).catch(error => dispatch(fetchCollectionsFaliure(error.message)))\n}\n\nexport function* fetchCollectionsStart() {\n    yield takeEvery(ShopActionTypes.FETCH_COLLECTIONS_START, fetchCollectionsAsync);\n}"]},"metadata":{},"sourceType":"module"}